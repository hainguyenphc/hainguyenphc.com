--- fontyourface.module
+++ fontyourface.module
@@ -5,19 +5,19 @@
  * Contains fontyourface.module..
  */
 
+use Drupal\Component\Utility\Html;
 use Drupal\Core\File\FileSystemInterface;
-use Drupal\Core\Url;
+use Drupal\Core\Link;
+use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Template\Attribute;
-use Drupal\Component\Utility\Html;
-use Drupal\Core\Link;
-use Drupal\taxonomy\Entity\Term;
-
-use Drupal\fontyourface\FontInterface;
-use Drupal\fontyourface\FontDisplayInterface;
+use Drupal\Core\Url;
 use Drupal\fontyourface\Entity\Font;
 use Drupal\fontyourface\Entity\FontDisplay;
+use Drupal\fontyourface\FontDisplayInterface;
+use Drupal\fontyourface\FontInterface;
+use Drupal\taxonomy\Entity\Term;
 
 /**
  * Implements hook_module_implements_alter().
@@ -26,11 +26,12 @@ function fontyourface_module_implements_alter(&$implementations, $hook) {
   if ($hook == 'page_attachments') {
     // Move the fontyourface and submodules to be last to build on page.
     $list = ['fontyourface'];
-    foreach (\Drupal::moduleHandler()->getImplementations('fontyourface_api') as $module_name) {
+    foreach (\Drupal::moduleHandler()->hasImplementations('fontyourface_api') as $module_name) {
       if (isset($implementations[$module_name])) {
         $list[] = $module_name;
       }
     }
+
     foreach ($list as $module_name) {
       $group = $implementations[$module_name];
       unset($implementations[$module_name]);
@@ -65,7 +66,8 @@ function fontyourface_library_info_build() {
     $styles = FontDisplay::loadByTheme($key);
     if (!empty($styles)) {
       foreach ($styles as $style) {
-        $file_url = file_build_uri('fontyourface/font_display/' . $style->id() . '.css');
+        $path = 'fontyourface/font_display/' . $style->id() . '.css';
+        $file_url = \Drupal::config('system.file')->get('default_scheme') . '://' . $path;
         $libraries['font_display_' . $key]['css']['base'][$file_url] = [
           'basename' => $file_url,
         ];
@@ -316,10 +318,7 @@ function fontyourface_save_font($font_data) {
     ];
   }
   $font->setMetadata(!empty($font_data->metadata) ? $font_data->metadata : []);
-  $font->status = FALSE;
-  if ($font->isActivated()) {
-    $font->status = TRUE;
-  }
+  $font->status = $font->isActivated();
   $font->save();
   return $font;
 }
@@ -396,7 +395,7 @@ function fontyourface_delete($provider) {
 }
 
 /**
- * Logs to watchdog if logging is enabled.
+ * Logs if logging is enabled.
  *
  * @param string $message
  *   Log message. This should be a literal string; see
@@ -407,7 +406,10 @@ function fontyourface_delete($provider) {
 function fontyourface_log($message, array $arguments) {
   $config = \Drupal::config('fontyourface.settings');
   if ($config->get('fontyourface_detailed_logging')) {
-    watchdog('@font-your-face', $message, $arguments, WATCHDOG_INFO);
+    $type = '@font-your-face';
+    $severity = RfcLogLevel::INFO;
+    $logger = \Drupal::logger($type);
+    $logger->log($severity, $message, $arguments);
   }
 }
 
@@ -421,7 +423,7 @@ function fontyourface_log($message, array $arguments) {
  *   TRUE if files save successfully. Throw any errors otherwise.
  */
 function fontyourface_save_and_generate_font_display_css(FontDisplayInterface $style) {
-  $directory = file_build_uri('fontyourface/font_display');
+  $directory = \Drupal::config('system.file')->get('default_scheme') . '://fontyourface/font_display';
   \Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
 
   $font = $style->getFont();
--- fontyourface.module
+++ fontyourface.module
@@ -26,16 +26,19 @@ function fontyourface_module_implements_alter(&$implementations, $hook) {
   if ($hook == 'page_attachments') {
     // Move the fontyourface and submodules to be last to build on page.
     $list = ['fontyourface'];
-    foreach (\Drupal::moduleHandler()->hasImplementations('fontyourface_api') as $module_name) {
-      if (isset($implementations[$module_name])) {
-        $list[] = $module_name;
+    $modules = \Drupal::moduleHandler()->hasImplementations('fontyourface_api');
+    if (is_array($modules) || is_object($modules)) {
+      foreach ($modules as $module_name) {
+        if (isset($implementations[$module_name])) {
+          $list[] = $module_name;
+        }
       }
-    }
 
-    foreach ($list as $module_name) {
-      $group = $implementations[$module_name];
-      unset($implementations[$module_name]);
-      $implementations[$module_name] = $group;
+      foreach ($list as $module_name) {
+        $group = $implementations[$module_name];
+        unset($implementations[$module_name]);
+        $implementations[$module_name] = $group;
+      }
     }
   }
 }
--- fontyourface.module
+++ fontyourface.module
@@ -449,7 +449,13 @@ function fontyourface_save_and_generate_font_display_css(FontDisplayInterface $s
  *   The found/created taxonomy term id.
  */
 function _fontyourface_get_vocabulary_term($term_value, $vocabulary) {
-  if ($terms = taxonomy_term_load_multiple_by_name($term_value, $vocabulary)) {
+  $storage = \Drupal::entityTypeManager()
+    ->getStorage('taxonomy_term');
+  $terms = $storage->loadByProperties([
+    'name' => $term_value,
+    'vid' => $vocabulary,
+  ]);
+  if ($terms) {
     $term = reset($terms);
   }
   else {
