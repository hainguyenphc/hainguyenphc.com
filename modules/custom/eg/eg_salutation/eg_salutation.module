<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountProxy;
use Drupal\user\Entity\User;

/**
 * Implements hook_form_alter().
 */
function eg_salutation_form_alter(
  &$form, FormStateInterface $form_state, $form_id
) {}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function eg_salutation_form_eg_salutation_hello_config_form_alter(
  &$form, FormStateInterface $form_state, $form_id
) {
  // Custom form submit handler.
  // Note: if Submit button on the form has '#submit' property specifying its
  // own handler, the custom form '#submit' handler(s) will not work anymore.
  // $form['#submit'][] = '_eg_salutation_my_handler';
  // $form['#validate'][] = '_eg_salutation_my_validator';
}

// function _eg_salutation_my_handler(&$form, FormStateInterface $form_state) {}
// function _eg_salutation_my_validator(&$form, FormStateInterface $form_state) {}

/**
 * Implements hook_token_info().
 */
function eg_salutation_token_info() {
  /**
   * Provides metadata about the 'hello_world' type.
   *
   * hello_world:morning
   * hello_world:afternoon
   */
  $hello_world_type = [
    'name' => t('Hello World'),
    'description' => t('Tokens for Hello World'),
  ];
  $hello_world_tokens = [
    'morning' => [
      'name' => t('Morning'),
      'description' => t('hello_world says Morning'),
    ],
    'afternoon' => [
      'name' => t('Afternoon'),
      'description' => t('hello_world says Afternoon'),
    ],
  ];

  $xin_chao_type = [];
  $xin_chao_tokens = [];

  return [
    'types' => [
      'hello_world' => $hello_world_type,
      'xin_chao' => $xin_chao_type,
    ],
    'tokens' => [
      'hello_world' => $hello_world_tokens,
      'xin_chao' => $xin_chao_tokens,
    ]
  ];
}

/**
 * Implements hook_tokens().
 *
 * @param BubbleableMetadata $bubbleable_metadata
 */
function eg_salutation_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacement = [];

  $token_service = \Drupal::token();

  if ($type === 'hello_world') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'morning': {
          $replacement[$original] = \Drupal::service('eg_salutation.hello')->hello();
          $config = \Drupal::config('eg_salutation.supplement');
          $bubbleable_metadata->addCacheableDependency($config);
          break;
        }
        case 'afternoon': {
          /* business logic here. */
          break;
        }
      }
    }
  }

  // Just an example how 2 types could complement each other.
  if ($type === 'xin_chao' && !empty($data['user'])) {
    foreach ($tokens as $name => $original) {
      switch($name) {
        /* business logic  */
      }
    }
  }
  if ($type === 'whatever') {
    $account = User::load(\Drupal::currentUser()->id());
    $bubbleable_metadata->addCacheContexts(['user']);
    $replacement += $token_service->generate(
      'xin_chao', $tokens, ['user' => $account], $options, $bubbleable_metadata
    );
  }

  return $replacement;
}

/**
 * Implements hook_node_access_records().
 */
function eg_salutation_node_access_records($node) {
  $grants = [];
  if ($node->id() === '9') {
    $grants[] = [
      // A made-up category name.
      'realm' => 'salutation',
      // Hard code user ID of 2.
      'gid' => 2,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 1,
    ];
  }
  return $grants;
}

/** 
 * Implements hook_node_grants().
 */
function eg_salutation_node_grants($account, string $operation) {
  if ($operation === 'update' && $account->isAuthenticated()) {
    $grants['salutation'] = [
      $account->id(),
    ];
    return $grants;
  }
}
